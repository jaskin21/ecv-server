openapi: 3.0.0
info:
  title: Expense API
  version: 1.1.0
  description: API for managing expenses with DynamoDB backend
servers:
  - url: http://localhost:5000
    description: Local dev server

paths:
  /expenses:
    get:
      summary: Get expenses (with optional search and category filter)
      tags: [Expenses]
      parameters:
        - in: query
          name: search
          schema:
            type: string
          required: false
          description: Search term applied across multiple fields (id, category, description, etc.)
        - in: query
          name: category
          schema:
            type: string
          required: false
          description: Filter by category
      responses:
        '200':
          description: A list of expenses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'
        '500':
          description: Internal server error

    post:
      summary: Add a new expense
      tags: [Expenses]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseInput'
            example:
              description: "Lunch"
              amount: 12.5
              category: "Food"
      responses:
        '201':
          description: Expense created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'

  /expenses/{id}:
    get:
      summary: Get an expense by ID
      tags: [Expenses]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expense found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '404':
          description: Expense not found

    patch:
      summary: Partially update an expense
      description: Update one or more fields of an existing expense by ID. Only the provided fields will be updated.
      tags: [Expenses]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the expense to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseUpdate'
      responses:
        '200':
          description: Expense updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '400':
          description: Bad Request (invalid or empty update fields)
        '404':
          description: Expense not found
        '500':
          description: Failed to update expense

    delete:
      summary: Delete an expense
      tags: [Expenses]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Expense deleted
        '404':
          description: Expense not found

  /expenses/summary/total:
    get:
      summary: Get total expenses summary within a date range
      tags: [Expenses]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [startDate, endDate]
              properties:
                startDate:
                  type: string
                  format: date-time
                  example: "2025-09-01T00:00:00.000Z"
                endDate:
                  type: string
                  format: date-time
                  example: "2025-09-30T23:59:59.000Z"
      responses:
        '200':
          description: Total expenses summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: number
                    example: 1250.75
                  count:
                    type: integer
                    example: 5
                  categories:
                    type: array
                    items:
                      type: object
                      properties:
                        category:
                          type: string
                          example: "Food"
                        amount:
                          type: number
                          example: 500.00
                        percentage:
                          type: number
                          format: float
                          example: 40.0
        '400':
          description: Invalid request parameters
        '500':
          description: Failed to fetch summary

components:
  schemas:
    Expense:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        amount:
          type: number
        category:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      example:
        id: "123"
        description: "Lunch"
        amount: 12.5
        category: "Food"
        createdAt: "2025-09-02T08:30:00.000Z"
        updatedAt: "2025-09-02T08:30:00.000Z"

    ExpenseInput:
      type: object
      required:
        - description
        - amount
        - category
      properties:
        description:
          type: string
        amount:
          type: number
        category:
          type: string

    ExpenseUpdate:
      type: object
      properties:
        description:
          type: string
        amount:
          type: number
        category:
          type: string
      additionalProperties: false