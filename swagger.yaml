openapi: 3.0.0
info:
  title: Expense API
  version: 1.0.0
  description: API for managing expenses with DynamoDB backend
servers:
  - url: http://localhost:3000
    description: Local dev server

paths:
  /expenses:
    get:
      summary: Get all expenses
      tags: [Expenses]
      responses:
        '200':
          description: A list of expenses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'
    post:
      summary: Add a new expense
      tags: [Expenses]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseInput'
            example:
              description: "Lunch"
              amount: 12.5
              category: "Food"
      responses:
        '201':
          description: Expense created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'

  /expenses/{id}:
    get:
      summary: Get an expense by ID
      tags: [Expenses]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expense found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
    patch:
      summary: Partially update an expense
      description: Update one or more fields of an existing expense by ID. Only the provided fields will be updated.
      tags: [Expenses]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the expense to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: "Lunch with client"
                amount:
                  type: number
                  example: 25.5
                date:
                  type: string
                  format: date
                  example: "2025-09-02"
              additionalProperties: false
      responses:
        '200':
          description: Expense updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Expense updated successfully"
                  data:
                    $ref: '#/components/schemas/Expense'
        '400':
          description: Bad Request (invalid or empty update fields)
        '404':
          description: Expense not found
        '500':
          description: Failed to update expense

    delete:
      summary: Delete an expense
      tags: [Expenses]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Expense deleted

  /expenses/summary/total:
    get:
      summary: Get total expenses summary within optional date range
      tags: [Expenses]
      parameters:
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          required: false
          description: Start date for filtering expenses (inclusive)
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          required: false
          description: End date for filtering expenses (inclusive)
      responses:
        '200':
          description: Total expenses summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: number
                    example: 1250.75
                  count:
                    type: integer
                    example: 5
                  startDate:
                    type: string
                    format: date
                    nullable: true
                    example: "2025-09-01"
                  endDate:
                    type: string
                    format: date
                    nullable: true
                    example: "2025-09-30"
        '400':
          description: Invalid request parameters
        '500':
          description: Failed to fetch summary


components:
  schemas:
    Expense:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        amount:
          type: number
      example:
        id: "123"
        description: "Lunch"
        amount: 12.5

    ExpenseInput:
      type: object
      properties:
        description:
          type: string
        amount:
          type: number
      required:
        - description
        - amount